.chapter(data-title='Download Message Attachment Tutorial')
  .step(data-title='Clone and Setup the project', data-file='../README.md' data-highlight='12-15')
    :markdown
      ### Clone and Setup the project
      Clone the project from GitHub and open it using Microsoft Visual Studio IDE.

  .step(data-title='Create a RingCentral app', data-file='../README.md' data-highlight='18-21')
    :markdown
      ### Create a RingCentral app
      If you don't know how to create a RingCentral app. Click https://developer.ringcentral.com/library/getting-started.html for instructions.

  .step(data-title='Set Environment Variables', data-file='../message-store-download-content-csharp-demo/Program.cs', data-highlight='11-17')
    :markdown
     ### Set Variables
     Copy the Client id and Client secret and specify them in following the parameters accordingly.
     ```
     const string RINGCENTRAL_CLIENTID = "Your_App_Client_Id";
     const string RINGCENTRAL_CLIENTSECRET = "Your_App_Client_Secret";
     const bool RINGCENTRAL_PRODUCTION = false;
     ```

     Enter the account login credentials to the following variables.
     ```
     const string RINGCENTRAL_USERNAME = "Your_Account_Username";
     const string RINGCENTRAL_PASSWORD = "Your_Account_Password";
     const string RINGCENTRAL_EXTENSION = "";
     ```

     If you want to run the app on your production account, copy app and login credentials for your production environment and change the following variable value to true.
     ```
     const bool RINGCENTRAL_PRODUCTION = true;
     ```

  .step(data-title='Login the platform', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='25-27')
    :markdown
      ### Login using RingCentral .Net SDK
      Using a RingCentral SDK is the most convenient way to authenticate and access RingCentral platform services.

      To login RingCentral platform, we call the __rc.Authorize()__ function, passing along the username, extension number (optional) and the password.

      Then we check if we have got the access token to make sure we have logged in successfully.

  .step(data-title='Specify message store query parameters', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='29-31')
    :markdown
      ### Specify message store query parameters
      To call the "message-store" endpoint we specify the time period using the __dateFrom__ and __dateTo__ query parameters.

      You can specify other query parameters such as __messageType__, __direction__ etc. if you want.

  .step(data-title='Get ready to save message attachments', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='32-36')
    :markdown
      ### Get ready to save message attachments
      We create a "content" folder to store message attachments.

      To get ready for downloading a big amount of attachments, we need to limit API calls to meet the "Usage Plan Group" requirement to avoid exceeding API rate limit. For this API endpoint, it is 40 API calls per minute.
      For that purpose, we use the __timePerApiCall__ variable to cause a delay between API calls.

  .step(data-title='Read the user message store', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='37-38')
    :markdown
      ### Read the user message store
      We call the __MessageStore().List()__ function to read the messages metadata.

      Then we use a foreach loop to iterate through the __records__ array.

  .step(data-title='Detect the message type', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='42-72')
    :markdown
      ### Detect the message type
      Each record may contain several attachments. We iterate through the attachments array, detect the message type to create a file name and file name extension accordingly.

      We implement the __getFileExtensionFromMimeType()__ function to specify the filename extension based on the attachment __contentType__.

  .step(data-title='Download the message attachment', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='73-80')
    :markdown
      ### Download the message attachment
      We download the attachment identified by the __attachment.id__.

      Finally, we read the data then save the data to a file under the __content__ folder.

  .step(data-title='Read the next attachment', data-file='../message-store-download-content-csharp-demo/Program.cs' data-highlight='81-86')
    :markdown
      ### Cause delay and read the next attachment
      We calculate the __consumed__ time it took to read and save an attachment, and cause a delay if the __consumed__ time is less than the __timePerApiCall__. Otherwise, we move on to download the next attachment.
